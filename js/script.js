const desktop = document.getElementById('desktop');
const mobile = document.getElementById('mobile');

const headerBlock = document.getElementById('header');
const aboutBlock = document.getElementById('about');
const casesBlock = document.getElementById('cases');
const giftsBlock = document.getElementById('gifts');
const endpointsBlock = document.getElementById('endpoints');

const consoleContent = document.getElementById('console-content');
const casesItems = document.getElementsByClassName('case-item');
const giftsCodes = document.getElementsByClassName('gift-code');
const menuItems = headerBlock.querySelectorAll('.menu-item a');
const endpointsConsole = endpointsBlock.querySelector('#console-endpoints');
const endpointsForm = endpointsBlock.querySelector('#console-endpoints-form');
const endpointsLogs = endpointsBlock.querySelector('#logs');
const endpointsConsoleForm = endpointsBlock.querySelector('.console-form');
const trackSecurityPicture = casesBlock.querySelector('#track-security-picture');
const endpointsModal = document.getElementById('endpoints-body');
const endpointsModalBody = endpointsModal.querySelector('.endpoints-modal-body');

const caseOpeners = casesBlock.querySelectorAll('.case-opener');

function bindClickCasesBlock() {

    for (let i = 0; i < caseOpeners.length; i++) {
        const opener = caseOpeners[i];

        opener.addEventListener('click', () => {
            const idTarget = opener.getAttribute('data-case');
            const caseContent = casesBlock.querySelector(`[data-case-content="${idTarget}"]`);
            const opened = caseContent.getAttribute('data-opened') === "1";

            if (opened) {
                caseContent.style.display = 'none';
                caseContent.setAttribute('data-opened', '0');
                opener.innerText = opener.innerText.replace('V', '>');
            } else {
                caseContent.style.display = 'block';
                caseContent.setAttribute('data-opened', '1');
                opener.innerText = opener.innerText.replace('>', 'V');
            }
        })
    }
}

const consoleText = ' –ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É \n' + 
    '—Ö–∞–∫–∞—Ç–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç—Ä–æ–∏–ª–∏ –æ–±—ã—á–Ω—ã–µ —Ä–µ–±—è—Ç–∞, –∑–∞—Ä—É—á–∏–≤—à–∏—Å—å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π \n' + 
    '–¢—é–º–µ–Ω—Å–∫–æ–π —à–∫–æ–ª—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –£—á–∞—Å—Ç–∏–µ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ - –æ—Ç–ª–∏—á–Ω–∞—è \n' +
    '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–∏ —Å–∫–∏–ª–ª—ã, —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ \n' + 
    '–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ üê∞ ü¶ä üêª. –ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è \n' + 
    '–≤–∫—É—Å–Ω—ã–µ –∫–µ–π—Å—ã, –∞ —Å–ø–æ–Ω—Å–æ—Ä—ã —Ö–∞–∫–∞—Ç–æ–Ω–∞ –ø–æ—Å—á–∏—Ç–∞–ª–∏, —á—Ç–æ –±—É–¥–µ—Ç \n' + 
    '–Ω–µ—Ö–æ—Ä–æ—à–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –±–µ–∑ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–∞.';

let consoleTextRendered = false;

function renderTextLetters(text) {
    consoleTextRendered = true;

    for (let i = 0; i < text.length; i++) {
        const promise = new Promise((res) => {
            setTimeout(() => res(text[i]), 50 * i);
        })

        promise.then((char) => {
            const prevText = consoleContent.innerText;
            const prepareText = prevText + char;
            consoleContent.innerHTML = prepareText;
        });
    }
}

const endpointsCommandResult = `
    <div class="endpoints-map">
        <p> > > > START 12:00 < < <</p>
        <p>| 07.08.2020</p>
        <p>+ --- 12:00 ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏</p>
        <p>|</p>
        <p>+ --- 12:30 ‚Äì –≤—ã–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</p>
        <p>|</p>
        <p>+ --- 13:30 ‚Äì —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ –∑–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏</p>
        <p>|</p>
        <p>+ --- 13:45 ‚Äì —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞</p>
        <p>|</p>
        <p>| 08.08.2020</p>
        <p>|</p>
        <p>+ --- 12:00 ‚Äì –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —á–µ–∫-–ø–æ–∏–Ω—Ç</p>
        <p>|</p>
        <p>+ --- 18:00 ‚Äì –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —á–µ–∫-–ø–æ–∏–Ω—Ç</p>
        <p>|</p>
        <p>| 09.08.2020</p>
        <p>|</p>
        <p>+ --- 9:00 ‚Äì —ç–∫—Å–ø—Ä–µ—Å—Å-–∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏ –ø–æ 5 –º–∏–Ω—É—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞</p>
        <p>|</p>
        <p>+ --- 10:00 ‚Äì —Å–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç –∫–æ–º–∞–Ω–¥</p>
        <p>|</p>
        <p>+ --- 10:30 ‚Äì –∑–∞—â–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
        <p>|</p>
        <p>+ --- 11:30 ‚Äì –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥</p>
        <p> > > > END < < <</p>
    </div>
`

const it2gContent = `
<pre>
     __   ________    _____     _____
    |__| |        |  /  _  \\   /  __ \\
     __  |__    __| |__/ \\  | |  |  |_|
    |  |    |  |         / /  |  | ___  
    |  |    |  |        / /   |  ||_  |
    |  |    |  |       / /    |  |  | |
    |  |    |  |      / /____ |  |__| |
    |__|    |__|     |_______| \\______/
</pre>
`

const hackerVideoContent = `
    <iframe width="400" height="200" src="https://www.youtube.com/embed/xb8G8qA9ibI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
`

function handleScrollPage() {
    if (window.pageYOffset >= 700 && !consoleTextRendered) {
        renderTextLetters(consoleText);
    } 
}

function handleHoverCaseItem(event) {
    const target = event.currentTarget;
    const arrow = target.querySelector('.case-arrow');
    arrow.classList.add('case-arrow-show');
}

function handleLeaveCaseItem(event) {
    const target = event.currentTarget;
    const arrow = target.querySelector('.case-arrow');
    arrow.classList.remove('case-arrow-show');
}

function addMouseEventCases() {
    for (let i = 0; i < casesItems.length; i++) {
        const caseItem = casesItems[i];
        caseItem.addEventListener('mousemove', handleHoverCaseItem);
        caseItem.addEventListener('mouseleave', handleLeaveCaseItem);
    }
}

function handleHoverGiftCode(event) {
    const target = event.currentTarget;
    const des = target.querySelector('.description');
    des.classList.add('description-show');
}

function handleLeaveGiftCode(event) {
    const target = event.currentTarget;
    const des = target.querySelector('.description');
    des.classList.remove('description-show');
}

function addMouseEventGiftCode() {
    for (let i = 0; i < giftsCodes.length; i++) {
        const giftCode = giftsCodes[i];
        giftCode.addEventListener('mousemove', handleHoverGiftCode);
        giftCode.addEventListener('mouseleave', handleLeaveGiftCode);
    }
}

function handleClickMenuItem(event) {
    event.preventDefault();
    const target = event.currentTarget;
    const href = target.getAttribute('href');
    const block = document.querySelector(href);
    window.scrollTo({
        top: block.offsetTop,
        behavior: "smooth"
    });
}

function handleHoverMenuItem(event) {
    const target = event.currentTarget;
    const arrow = target.querySelector('span');
    arrow.classList.add('arrow-show');
}

function handleLeaveMenuItem(event) {
    const target = event.currentTarget;
    const arrow = target.querySelector('span');
    arrow.classList.remove('arrow-show');
}

function addMouseEventMenuItems() {
    for (let i = 0; i < menuItems.length; i++) {
        const item = menuItems[i];
        item.addEventListener('mouseenter', handleHoverMenuItem);
        item.addEventListener('mouseleave', handleLeaveMenuItem);
        item.addEventListener('click', handleClickMenuItem);
    }
}

function handleClickBtnGoToCase() {
    window.scrollTo({
        top: casesBlock.offsetTop,
        behavior: "smooth"
    });
}

endpointsConsole.addEventListener('click', () => endpointsForm['command'].focus());

endpointsModal.addEventListener('click', () => { endpointsModal.style.display = 'none' });
endpointsModalBody.addEventListener('click', (event) => event.stopPropagation());


endpointsForm.addEventListener('submit', (event) => {
    event.preventDefault();

    const command = endpointsForm['command'].value;
    endpointsForm['command'].setAttribute('data-prevcommand', command);

    if (!!command.length) {
        switch(command) {
            case 'clear':
                endpointsLogs.innerHTML = '';
                endpointsForm['command'].value = '';
                break;
            
            case 'time':
                endpointsLogs.innerHTML += `<p>Online-Hackaton: TIME TO START: ${consoleTime}</p>`;
                endpointsForm['command'].value = '';
                break;

            case 'it2g':
                endpointsLogs.innerHTML = it2gContent;
                endpointsForm['command'].value = '';
                break;

            case 'happy hack':
                endpointsLogs.innerHTML = hackerVideoContent;
                endpointsForm['command'].value = '';
                break;

            case 'help':    
            case '-help':
            case '--help':
                endpointsLogs.innerHTML = `
                    <p>COMMANDS:</p>
                    <p>endpoints</p>
                    <p>time</p>
                    <p>clear</p>
                `;
                endpointsForm['command'].value = '';
                break;

            case 'endpoints':
                endpointsConsoleForm.style.display = "none";
                endpointsLogs.innerHTML = '';
                endpointsForm['command'].value = '';

                let interval;
                let timer;

                const p = new Promise((resolve) => {
                    let loadRow = '<p>LOADING...</P>';
                    interval = setInterval(() => {
                        loadRow += '=';
                        endpointsLogs.innerHTML = loadRow + '>'
                    }, 60);

                    timer = setTimeout(() => {
                        resolve()
                    }, 4000);
                })
                p.then(() => {
                    clearInterval(interval);
                    clearTimeout(timer);
                    endpointsConsoleForm.style.display = "flex";
                    endpointsModal.style.display = "flex";
                    endpointsLogs.innerHTML = "";
                    endpointsForm['command'].focus();
                });
                break;
    
            default:
                endpointsLogs.innerHTML += `<p>Online-Hackaton: command '${command}' not found, use command 'help'</p>`;
                endpointsForm['command'].value = '';
                break;
        }
    }
})

endpointsForm['command'].addEventListener('keydown', (event) => {
    if (event.key === 'ArrowUp') {
        const prevcommand = endpointsForm['command'].getAttribute('data-prevcommand');
        !!prevcommand && (endpointsForm['command'].value = prevcommand);
    }
})

function init() {
    addMouseEventCases();
    addMouseEventGiftCode();
    addMouseEventMenuItems();
    bindClickCasesBlock();

    window.addEventListener('scroll', handleScrollPage);
    
    //INTERVAL FOR TITLE
    document.title === '–• –ê –ö –ê –¢ 0 –ù'
    setInterval(() => { 
        if (document.title === '–• –ê –ö –ê –¢ 0 –ù') {
            document.title = '–• üëæ –ö üëæ –¢ ü§ñ –ù'
        } else {
            document.title = '–• –ê –ö –ê –¢ 0 –ù'
        }
    }, 3000);

    if (window.innerWidth >= 1050) {
        document.body.removeChild(mobile);
    } else {
        document.body.removeChild(desktop);
    }
}

// INITIAL
init();
